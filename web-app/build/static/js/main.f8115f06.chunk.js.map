{"version":3,"sources":["utils.ts","components/styled.tsx","components/FilmListElement/styled.tsx","components/FilmListElement/FilmListElement.tsx","components/FilmList/styled.tsx","components/FilmList/FilmList.tsx","components/FilmList/Container.tsx","components/FilmDetailShowtimes/styled.tsx","components/FilmDetailShowtimes/FilmDetailShowtimes.tsx","components/FilmDetailShowtimes/Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getYearFromDateString","date","slice","Card","styled","div","_templateObject","List","ol","_templateObject2","ListElement","li","_templateObject3","Wrapper","styled_templateObject","Poster","img","styled_templateObject2","InformationWrapper","styled_templateObject3","Title","span","_templateObject4","ReleaseYear","_templateObject5","Directors","_templateObject6","Description","_templateObject7","Link","ReactRouterLink","_templateObject8","FilmListElement","_ref","string","length","id","slug","encryptedUrlId","title","releaseDate","directors","description","react_default","a","createElement","to","concat","src","truncate","separator","omission","CommonList","CommonListElement","FilmList","films","styled_List","map","film","styled_ListElement","key","components_FilmListElement_FilmListElement","scRating","GET_FILMS_CURRENTLY_SHOWING","gql","Container_templateObject","FilmListContainer","react_apollo_esm","query","loading","error","data","message","components_FilmList_FilmList","filmsCurrentlyShowing","FilmDetailShowtimes_styled_templateObject","FilmHeading","FilmDetailShowtimes_styled_templateObject2","h1","FilmDetailShowtimes_styled_templateObject3","styled_templateObject4","styled_templateObject5","ShowtimesWrapper","styled_templateObject6","ShowtimesTitle","h2","styled_templateObject7","ShowtimeDayButtonGroup","styled_templateObject8","ShowtimeDayButton","button","_templateObject9","selected","_ref2","CinemaList","_templateObject10","CinemaListElement","_templateObject11","CinemaTitle","_templateObject12","ShowtimesList","_templateObject13","ShowtimesListElement","_templateObject14","FilmDetailShowtimes","state","selectedDay","_this","props","showtimeDays","selectDay","day","setState","_this2","this","_this$props","_this$props$showtimeD","react","styled_Wrapper","styled_Title","styled_ReleaseYear","styled_Directors","dayFormatted","onClick","cinemas","cinema","name","showtimes","showtime","hourFormatted","Component","GET_FILM_WITH_SHOWTIMES","FilmDetailShowtimes_Container_templateObject","FilmDetailShowtimesContainer","variables","components_FilmDetailShowtimes_FilmDetailShowtimes","Main","main","App_templateObject","App","react_router","exact","path","component","render","match","FilmDetailShowtimes_Container","params","Boolean","window","location","hostname","apolloClient","ApolloClient","uri","ReactDOM","react_router_dom","client","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8115f06.chunk.js","sourcesContent":["import truncate from 'lodash/truncate';\n\nconst getFilmPosterImageUrl = (id: string) =>\n  `https://res.cloudinary.com/dh3qpkhir/image/upload/c_thumb,w_300/${id}.jpg`;\n\nconst getYearFromDateString = (date: string): string => date.slice(0, 4);\n\nconst getShortenedString = (string: string, length: number): string =>\n  truncate(string, { length, separator: /,? +/, omission: 'â€¦' });\n\nexport { getFilmPosterImageUrl, getShortenedString, getYearFromDateString };\n","import styled from 'styled-components';\n\nconst Card = styled.div`\n  display: grid;\n  grid-column-gap: 15px;\n  grid-row-gap: 7.5px;\n  padding: 15px;\n  background-color: white;\n  border-top: 1px solid #e6e6e6;\n  border-bottom: 1px solid #e6e6e6;\n\n  @media (min-width: 721px) {\n    border-left: 1px solid #e6e6e6;\n    border-right: 1px solid #e6e6e6;\n    border-radius: 4px;\n  }\n`;\n\nconst List = styled.ol`\n  -webkit-padding-start: 0;\n  padding-inline-start: 0;\n  display: grid;\n  grid-row-gap: 15px;\n`;\n\nconst ListElement = styled.li`\n  list-style: none;\n`;\n\nexport { Card, List, ListElement };\n","import { Link as ReactRouterLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Card } from '../styled';\n\nconst Wrapper = styled(Card)`\n  grid-template-columns: 100px auto;\n`;\n\nconst Poster = styled.img`\n  width: 100%;\n`;\n\nconst InformationWrapper = styled.div``;\n\nconst Title = styled.span`\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst ReleaseYear = styled.span`\n  font-size: 15px;\n  color: gray;\n`;\n\nconst Directors = styled.div`\n  font-size: 15px;\n  color: gray;\n`;\n\nconst Description = styled.div`\n  margin-top: 7.5px;\n`;\n\nconst Link = styled(ReactRouterLink)`\n  text-decoration: none;\n  color: initial;\n`;\n\nexport {\n  Link,\n  Wrapper,\n  Poster,\n  InformationWrapper,\n  Title,\n  ReleaseYear,\n  Directors,\n  Description,\n};\n","import React from 'react';\n\nimport {\n  getFilmPosterImageUrl,\n  getYearFromDateString,\n  getShortenedString,\n} from '../../utils';\nimport {\n  Link,\n  Wrapper,\n  Poster,\n  InformationWrapper,\n  Title,\n  ReleaseYear,\n  Directors,\n  Description,\n} from './styled';\n\nconst FilmListElement: React.FC<Film> = ({\n  slug,\n  encryptedUrlId,\n  title,\n  releaseDate,\n  directors,\n  description,\n}) => (\n  <Link to={`/films/${slug}`}>\n    <Wrapper>\n      <Poster src={getFilmPosterImageUrl(encryptedUrlId)} />\n      <InformationWrapper>\n        <Title>{title}</Title>\n        <ReleaseYear>{` (${getYearFromDateString(releaseDate)})`}</ReleaseYear>\n        <Directors>{directors}</Directors>\n        <Description>{getShortenedString(description, 200)}</Description>\n      </InformationWrapper>\n    </Wrapper>\n  </Link>\n);\n\nexport default FilmListElement;\n","import {\n  List as CommonList,\n  ListElement as CommonListElement,\n} from '../styled';\n\nconst List = CommonList;\n\nconst ListElement = CommonListElement;\n\nexport { List, ListElement };\n","import React from 'react';\n\nimport FilmListElement from '../FilmListElement/FilmListElement';\nimport { List, ListElement } from './styled';\n\nconst FilmList: React.FC<{ films: Film[] }> = ({ films }) => (\n  <List>\n    {films.map(film => (\n      <ListElement key={film.slug}>\n        <FilmListElement\n          slug={film.slug}\n          encryptedUrlId={film.encryptedUrlId}\n          title={film.title}\n          scRating={film.scRating}\n          releaseDate={film.releaseDate}\n          directors={film.directors}\n          description={film.description}\n        />\n      </ListElement>\n    ))}\n  </List>\n);\n\nexport default FilmList;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport FilmList from './FilmList';\n\nconst GET_FILMS_CURRENTLY_SHOWING = gql`\n  query GetFilmsCurrentlyShowing {\n    filmsCurrentlyShowing(offset: 0, limit: 15) {\n      slug\n      encryptedUrlId\n      title\n      scRating\n      releaseDate\n      directors\n      description\n    }\n  }\n`;\n\ntype Data = {\n  filmsCurrentlyShowing: Film[];\n};\n\nconst FilmListContainer: React.FC = () => (\n  <Query<Data> query={GET_FILMS_CURRENTLY_SHOWING}>\n    {({ loading, error, data }) => {\n      if (loading) return 'Loading...';\n      if (error || !data) return `Error! ${error && error.message}`;\n\n      return <FilmList films={data.filmsCurrentlyShowing} />;\n    }}\n  </Query>\n);\n\nexport default FilmListContainer;\n","import styled from 'styled-components';\nimport { Card, List, ListElement } from '../styled';\n\nconst showtimesThemeColor = '#f30a49';\n\nconst Wrapper = styled.div`\n  display: grid;\n  row-gap: 15px;\n  margin: 0 auto;\n  padding: 15px;\n`;\n\nconst FilmHeading = styled.div``;\n\nconst Title = styled.h1`\n  font-size: 30px;\n  display: inline;\n  font-weight: bold;\n  margin: 0;\n`;\n\nconst ReleaseYear = styled.span`\n  font-size: 20px;\n  color: gray;\n`;\n\nconst Directors = styled.div`\n  font-size: 20px;\n  color: gray;\n`;\n\nconst ShowtimesWrapper = styled(Card)`\n  background-color: white;\n\n  @media (min-width: 721px) {\n    margin-bottom: 15px;\n  }\n`;\n\nconst ShowtimesTitle = styled.h2`\n  margin: 0;\n  font-size: 24px;\n`;\n\nconst ShowtimeDayButtonGroup = styled.div`\n  line-height: 32px;\n`;\n\ntype ShowtimeDayButtonProps = {\n  selected?: boolean;\n};\n\nconst ShowtimeDayButton = styled.button<ShowtimeDayButtonProps>`\n  color: ${({ selected }) => (selected ? 'white' : showtimesThemeColor)};\n  padding: 4px 7px;\n  background-color: ${({ selected }) =>\n    selected ? showtimesThemeColor : 'white'};\n  border: 1px solid ${showtimesThemeColor};\n  border-radius: 12px;\n  font-weight: bold;\n  font-size: 12.5px;\n  text-transform: uppercase;\n  display: inline;\n`;\n\nconst CinemaList = styled(List)`\n  margin-bottom: 0;\n`;\n\nconst CinemaListElement = styled(ListElement)`\n  display: grid;\n  padding-top: 15px;\n  grid-row-gap: 11.25px;\n  border-top: 1px solid #e6e6e6;\n`;\n\nconst CinemaTitle = styled.div`\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst ShowtimesList = styled(List)`\n  display: block;\n  line-height: 30px;\n`;\n\nconst ShowtimesListElement = styled(ListElement)`\n  display: inline;\n  padding: 2px 4px 3px;\n  font-size: 15px;\n  border: 1px solid #e6e6e6;\n  border-radius: 4px;\n`;\n\nexport {\n  Wrapper,\n  FilmHeading,\n  Title,\n  ReleaseYear,\n  Directors,\n  ShowtimesWrapper,\n  ShowtimesTitle,\n  ShowtimeDayButtonGroup,\n  ShowtimeDayButton,\n  CinemaList,\n  CinemaListElement,\n  CinemaTitle,\n  ShowtimesList,\n  ShowtimesListElement,\n};\n","import React, { Component, Fragment } from 'react';\nimport {\n  Wrapper,\n  Title,\n  ReleaseYear,\n  Directors,\n  ShowtimesWrapper,\n  ShowtimesTitle,\n  FilmHeading,\n  CinemaList,\n  ShowtimeDayButton,\n  ShowtimeDayButtonGroup,\n  CinemaListElement,\n  CinemaTitle,\n  ShowtimesList,\n  ShowtimesListElement,\n} from './styled';\nimport { getYearFromDateString } from '../../utils';\n\nclass FilmDetailShowtimes extends Component<FilmWithShowtimeDays> {\n  state = {\n    selectedDay: this.props.showtimeDays.length && this.props.showtimeDays[0],\n  };\n\n  selectDay = (day: FilmShowtimeDay) => {\n    this.setState({ selectedDay: day });\n  };\n\n  render() {\n    const { title, releaseDate, directors, showtimeDays = [] } = this.props;\n    const { selectedDay } = this.state;\n\n    return (\n      <Fragment>\n        <Wrapper>\n          <FilmHeading>\n            <Title>{title}</Title>\n            <ReleaseYear>{` (${getYearFromDateString(\n              releaseDate\n            )})`}</ReleaseYear>\n            <Directors>{directors}</Directors>\n          </FilmHeading>\n        </Wrapper>\n        <ShowtimesWrapper>\n          <ShowtimesTitle>SÃ©ances</ShowtimesTitle>\n          {selectedDay && (\n            <Fragment>\n              <ShowtimeDayButtonGroup>\n                {showtimeDays.map(day => (\n                  <Fragment key={day.dayFormatted}>\n                    <ShowtimeDayButton\n                      selected={day.dayFormatted === selectedDay.dayFormatted}\n                      onClick={() => this.selectDay(day)}\n                    >\n                      {day.dayFormatted}\n                    </ShowtimeDayButton>{' '}\n                  </Fragment>\n                ))}\n              </ShowtimeDayButtonGroup>\n              <CinemaList>\n                {selectedDay.cinemas.map(cinema => (\n                  <CinemaListElement key={cinema.slug}>\n                    <CinemaTitle>{cinema.name}</CinemaTitle>\n                    <ShowtimesList>\n                      {cinema.showtimes.map(showtime => (\n                        <Fragment key={showtime.hourFormatted}>\n                          <ShowtimesListElement>\n                            {showtime.hourFormatted}\n                          </ShowtimesListElement>{' '}\n                        </Fragment>\n                      ))}\n                    </ShowtimesList>\n                  </CinemaListElement>\n                ))}\n              </CinemaList>\n            </Fragment>\n          )}\n        </ShowtimesWrapper>\n      </Fragment>\n    );\n  }\n}\n\nexport default FilmDetailShowtimes;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport FilmDetailShowtimes from './FilmDetailShowtimes';\n\nconst GET_FILM_WITH_SHOWTIMES = gql`\n  query GetFilmAndShowtimes($slug: ID!) {\n    film(slug: $slug) {\n      slug\n      title\n      releaseDate\n      directors\n      showtimeDays {\n        dayFormatted\n        cinemas {\n          slug\n          name\n          showtimes {\n            hourFormatted\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype Data = {\n  film: FilmWithShowtimeDays;\n};\n\nconst FilmDetailShowtimesContainer: React.FC<{ slug: string }> = ({ slug }) => (\n  <Query<Data> query={GET_FILM_WITH_SHOWTIMES} variables={{ slug }}>\n    {({ loading, error, data }) => {\n      if (loading) return 'Loading...';\n      if (error || !data) return `Error! ${error && error.message}`;\n\n      return <FilmDetailShowtimes {...data.film} />;\n    }}\n  </Query>\n);\n\nexport default FilmDetailShowtimesContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Switch, Route, RouteComponentProps } from 'react-router-dom';\n\nimport FilmListContainer from './components/FilmList/Container';\nimport FilmDetailShowtimesContainer from './components/FilmDetailShowtimes/Container';\n\nconst Main = styled.main`\n  max-width: 720px;\n  margin: 0 auto;\n`;\n\ninterface FilmDetailShowtimesContainerRouteMatchParams {\n  slug: string;\n}\n\ninterface FilmDetailShowtimesContainerRouteProps\n  extends RouteComponentProps<FilmDetailShowtimesContainerRouteMatchParams> {\n  slug?: string;\n}\n\nconst App: React.FC = () => (\n  <Main>\n    <Switch>\n      <Route exact path=\"/\" component={FilmListContainer} />\n      <Route\n        path=\"/films/:slug\"\n        render={({ match }: FilmDetailShowtimesContainerRouteProps) => (\n          <FilmDetailShowtimesContainer slug={match.params.slug} />\n        )}\n      />\n    </Switch>\n  </Main>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst apolloClient = new ApolloClient({ uri: 'http://localhost:4000/graphql' });\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}